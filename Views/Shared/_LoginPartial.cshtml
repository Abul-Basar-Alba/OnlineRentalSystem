@using Microsoft.AspNetCore.Identity
@using OnlineRentalSystem.Models.Identity 
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager 

<ul class="navbar-nav flex items-center space-x-4">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item">
            <a id="manage" class="nav-link text-black" asp-controller="Account" asp-action="Manage" title="Manage">Profile</a>
        </li>

        @* Conditional links based on User Roles *@
        @if (await HasRole("Admin"))
        {
            <li class="nav-item">
                <a class="nav-link text-black" asp-controller="Account" asp-action="Admin">Admin Dashboard</a>
            </li>
        }
        @if (await HasRole("Owner"))
        {
            <li class="nav-item">
                <a class="py-2 px-4 rounded-md text-sm font-medium text-green-600 border border-green-600 hover:bg-green-50" asp-controller="Owner" asp-action="Dashboard">Owner Dashboard</a>
            </li>
        }

        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-controller="Account" asp-action="Logout" method="post">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item m-1">
            <a class="btn btn-outline-primary" asp-controller="Account" asp-action="Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="btn btn-primary" asp-controller="Account" asp-action="Login">Login</a>
        </li>
    }
</ul>

@functions {
    // Helper function to check if the current user has a specific role
    private async Task<bool> HasRole(string roleName)
    {
        if (User == null || !User.Identity.IsAuthenticated)
        {
            return false;
        }

        var user = await UserManager.GetUserAsync(User);
        if (user == null)
        {
            return false;
        }

        return await UserManager.IsInRoleAsync(user, roleName);
    }
}